[gd_scene load_steps=4 format=2]

[ext_resource path="res://PixelFont.tres" type="DynamicFont" id=1]

[sub_resource type="StyleBoxFlat" id=1]
bg_color = Color( 0.145098, 0.309804, 0.176471, 1 )
anti_aliasing = false

[sub_resource type="GDScript" id=2]
script/source = "extends 'res://Console.gd'

onready var gameState = $\"/root/GameState\"
var spaceGame = preload('res://SpaceGame.tscn')
var snakeGame = preload('res://SnakeGame.tscn')
var platformerGame = preload('res://Platformer.tscn')

func _ready():
	if gameState.miniGame == 'snake':
		if gameState.miniGameResult:
			output('Connection established.')
			output('Waiting for first packet`.`.`.``````````````\\n')
			output('Unknown protocol detected. Run \"trace\" to analyze.')
			gameState.snakeDone = true
		else:
			output('Failed to acquire network signal. Connection failed.')
			
	elif gameState.miniGame == 'space':
		if gameState.miniGameResult:
			output('Protocol trace complete.\\n')
			output('Analyzing results')
			output('..````.``..`````..`.`.``...````````.``....`.```````..`..```..\\n')
			output('Protocol fully analyzed, connecting to adaptive hull`````.`````.`````.')
			output('Connection established.')
			gameState.spaceDone = true
		else:
			output('Connection terminated, protocol analyzation failed.')
			
	else:
		output('System initialization complete.\\n')
		output('No network found, unable to connect to adaptive hull.')
			
	createPrompt()

func command_default():
	output('ERROR: Command not found\\nCommands: status, connect, trace, init')
	
func command_status(param):
	output('v118.10.2122')
	output('Memory 100%')
	output('GANN loss rate 0.01%')
	
	if gameState.snakeDone:
		output('Network located at quantum entanglement a32-eff-819')
	else:
		output('No network')
		
	if gameState.spaceDone:
		output('Adaptive hull connected on DBUS::3')
	else:  
		output('No adaptive hull present on DBUS')
		
	if gameState.snakeDone and gameState.spaceDone:
		output('\\n- All systems nominal. Ready to engage adaptive hull. -')
	else:
		output('\\nSystem OK')
	
func command_connect(param):
	output('Attempting to reconnect to network```.```.```.')
	output('Failed to acquire signal automatically, please adjust parameters manually.')
	output('````````````````````````````````````````````````````')

	yield(self, 'output_done')
	
	gameState.miniGame = 'snake'
	get_tree().change_scene_to(snakeGame)

func command_trace(param):
	if not gameState.snakeDone:
		output('ERROR: No network connected.')
		return
		
	output('Initiating trace of protocol```.```.```.\\n')
	output('WARNING: System defenses activated.')
	output('         Trace will take some time...')
	output('````````````````````````````````````````````````````')

	yield(self, 'output_done')
	
	gameState.miniGame = 'space'
	get_tree().change_scene_to(spaceGame)
	
func command_init(param):
	if not gameState.snakeDone:
		output('ERROR: No network connected.')
		return
		
	if not gameState.spaceDone:
		output('ERROR: No hull found.')
		return
	
	output('Establish communication     [ OK ]')
	output('Pull upstream               [ OK ]')
	output('Start DBUS poller           [ OK ]')
	output('Prepare memory map          [ OK ]')
	output('Sensor self check           [ OK ]')
	output('Engage dummy protocol       [ OK ]\\n')
	output('Power up')
	output('`````````````````````````````')
	
	yield(self, 'output_done')
	
	get_tree().change_scene_to(platformerGame)"

[node name="Node2D" type="Node2D"]

[node name="TextEdit" type="TextEdit" parent="."]
margin_right = 960.0
margin_bottom = 528.0
mouse_filter = 2
custom_styles/read_only = SubResource( 1 )
custom_styles/normal = SubResource( 1 )
custom_fonts/font = ExtResource( 1 )
custom_colors/font_color = Color( 0.52549, 0.729412, 0.537255, 1 )
custom_colors/current_line_color = Color( 0.2, 0.337255, 0.207843, 1 )
custom_colors/completion_selected_color = Color( 0, 0, 0, 1 )
context_menu_enabled = false
wrap_enabled = true
script = SubResource( 2 )
