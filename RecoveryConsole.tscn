[gd_scene load_steps=4 format=2]

[ext_resource path="res://PixelFont.tres" type="DynamicFont" id=1]

[sub_resource type="StyleBoxFlat" id=1]
bg_color = Color( 0, 0, 0, 1 )
anti_aliasing = false

[sub_resource type="GDScript" id=2]
script/source = "extends 'res://Console.gd'

onready var gameState = $\"/root/GameState\"
var nextScene = preload('res://MainConsole.tscn')

var memchkN = 0
var words = ['self', 'trial', 'remember']
var scrambled = []
var canBoot = false

func _ready():
	for word in words:
		scrambled.append(scramble(word))
		
	output('+ Recovery Mode +\\n')
	createPrompt()
	
func scramble(string):
	var output = string
	var x = 0
	var l = string.length()
	
	while output == string:
		for i in (randi() % 5) + 5:
			x = randi() % l
			output = output.substr(x, l-x) + output.substr(0, x)
		
	return output

func command_default():
	output('ERROR: Command not found\\nCommands: status, memchk, boot')
		
func command_status(param):
	output('v118.10.2122')
	output('No network')
	output('No adaptive hull present on DBUS\\n')
	
	if not canBoot:
		output('ERROR: Long memory fragmentation detected!')
	else:
		output('System check passed! Run \"boot\" to continue.')
	
func command_memchk(param):
	if param == 'manual':
		command_fix(null)
	else:
		output('- Checking memory -')
		if canBoot:
			output('.```.`.`.`.````.````.``````.````````.````.`````.``.```.```.``.```...```.')
			output('.```.`.`.`.````.```.````.````.``.```````.```````.``````.`````.``.`````.`````.``.```.\\n')
			output('Memory check complete.')
		else:
			output('.```.`.`.`.````````.``````.````````````````````.`````````````````.`````````````````````````````````````E\\n')
			output('FATAL: Automatic memory correction failed')
			output('       Run \"memchk manual\" to fix errors.')

func command_fix(param):
	if param:
		if param == words[memchkN]:
			output('SUCCESS\\nMemory location recovered.\\n')
			memchkN += 1
			
			if memchkN == words.size():
				canBoot = true
				command_memchk(null)
				return
		else:
			output('ERROR: Checksum failed, memory location not recovered.\\n')
			
	output('Corrupted memory location found.')
	output('Enter corrected data for block:\\n')
	output('   ' + scrambled[memchkN])
	output('\\nUsage: fix <word>')
	
func command_boot(param):
	if canBoot:
		output('Prepare GANN                [ OK ]')
		output('Initialize memory map       [ OK ]')
		output('Locating interface          [ OK ]')
		output('Diagnostics                 [ OK ]')
		output('Feed tomogachi              [ OK ]')
		output('```````````')
		yield(self, 'output_done')
		get_tree().change_scene_to(nextScene)
	else:
		output('FATAL: Manual override failed, memory corruption')"

[node name="Node2D" type="Node2D"]

[node name="TextEdit" type="TextEdit" parent="."]
margin_right = 960.0
margin_bottom = 528.0
mouse_filter = 2
custom_styles/normal = SubResource( 1 )
custom_fonts/font = ExtResource( 1 )
custom_colors/current_line_color = Color( 0.0470588, 0.0470588, 0.0470588, 1 )
highlight_current_line = true
context_menu_enabled = false
wrap_enabled = true
caret_block_mode = true
caret_blink = true
script = SubResource( 2 )
